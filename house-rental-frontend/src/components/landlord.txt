import React, { useState } from 'react';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';

export default function FormPropsTextFields() {
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [email, setEmail] = useState('');
    const [phoneNumber, setPhoneNumber] = useState('');
    const [mobileNumber, setMobileNumber] = useState('');
    const [companyName, setCompanyName] = useState('');

    const isEmailValid = (email) => {
        return email.includes('@');
    };

    const isPhoneNumberValid = (phoneNumber) => {
        return /^\d+$/.test(phoneNumber);
    };

    const handleEmailChange = (e) => {
        setEmail(e.target.value);
    };

    const handlePhoneNumberChange = (e) => {
        setPhoneNumber(e.target.value);
    };
    return (
        <Box
        component="form"
        sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            '& .MuiTextField-root': { m: 1, width: '100%' },
        }}
        noValidate
        autoComplete="off"
        >
        <TextField
            required
            id="outlined-required"
            label="First Name"
            variant="standard"
            value={firstName}
            onChange={(e) => setFirstName(e.target.value)}
        />
        <TextField
            required
            id="outlined-last-name"
            label="Last Name"
            variant="standard"
            value={lastName}
            onChange={(e) => setLastName(e.target.value)}
        />
        <TextField
            required
            id="outlined-number_phone"
            label="Phone Number"
            variant="standard"
            value={phoneNumber}
            onChange={handlePhoneNumberChange}
            error={!isPhoneNumberValid(phoneNumber)}
            helperText={!isPhoneNumberValid(phoneNumber) && 'Invalid phone number'}
        />
        <TextField
            id="outlined-mobile-number"
            label="Mobile Number"
            variant="standard"
            value={mobileNumber}
            onChange={(e) => setMobileNumber(e.target.value)}
        />
        <TextField
            required
            id="outlined-email"
            label="Email"
            variant="standard"
            value={email}
            onChange={handleEmailChange}
            error={!isEmailValid(email)}
            helperText={!isEmailValid(email) && 'Invalid email'}
        />
        <TextField
            required
            id="outlined-company"
            label="Company Name"
            variant="standard"
            value={companyName}
            onChange={(e) => setCompanyName(e.target.value)}
        />
        </Box>
    );
    }